{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import torch\n",
        "from chronos import ChronosPipeline"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1721763563300
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Define date range for monthly frequency\n",
        "date_range = pd.date_range(start='2023-01-01', end='2024-12-31', freq='M')\n",
        "\n",
        "# Generate trends\n",
        "np.random.seed(42)  # for reproducibility\n",
        "\n",
        "# Generate upward trend data\n",
        "er_visits = np.linspace(50, 300, num=len(date_range)) + np.random.randint(-10, 10, size=len(date_range))\n",
        "re_admissions = np.linspace(10, 60, num=len(date_range)) + np.random.randint(-5, 5, size=len(date_range))\n",
        "length_of_stay = np.linspace(2, 15, num=len(date_range)) + np.random.uniform(-1, 1, size=len(date_range))\n",
        "number_of_procedures = np.linspace(1, 30, num=len(date_range)) + np.random.randint(-2, 2, size=len(date_range))\n",
        "\n",
        "# Generate downward trend data\n",
        "patient_satisfaction_score = np.linspace(5, 1, num=len(date_range)) + np.random.uniform(-0.5, 0.5, size=len(date_range))\n",
        "\n",
        "# Clip values to ensure they remain within a realistic range\n",
        "er_visits = np.clip(er_visits, 50, 300)\n",
        "re_admissions = np.clip(re_admissions, 10, 60)\n",
        "length_of_stay = np.clip(length_of_stay, 2, 15)\n",
        "number_of_procedures = np.clip(number_of_procedures, 1, 30)\n",
        "patient_satisfaction_score = np.clip(patient_satisfaction_score, 1, 5)\n",
        "\n",
        "data = {\n",
        "    'Date': date_range,\n",
        "    'ER_visits': er_visits,\n",
        "    'Re_admissions': re_admissions,\n",
        "    'Length_of_stay': length_of_stay,\n",
        "    'Patient_satisfaction_score': patient_satisfaction_score,\n",
        "    'Number_of_procedures': number_of_procedures\n",
        "}\n",
        "\n",
        "# Create DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "print(df.head())\n",
        "\n",
        "# Save DataFrame to a CSV file\n",
        "df.to_csv('health_care_data_2023_2024.csv', index=False)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "        Date  ER_visits  Re_admissions  Length_of_stay  \\\n0 2023-01-31  50.000000      10.000000        2.818641   \n1 2023-02-28  69.869565      13.173913        2.082777   \n2 2023-03-31  75.739130      12.347826        3.455479   \n3 2023-04-30  82.608696      19.521739        3.319074   \n4 2023-05-31  90.478261      15.695652        4.301006   \n\n   Patient_satisfaction_score  Number_of_procedures  \n0                    4.615869              1.000000  \n1                    5.000000              1.000000  \n2                    4.775472              1.521739  \n3                    4.309159              2.782609  \n4                    3.867906              6.043478  \n"
        }
      ],
      "execution_count": 14,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1721764273495
        }
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "outputs": [],
      "execution_count": 15,
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1721764279494
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import torch\n",
        "from chronos import ChronosPipeline\n",
        "\n",
        "pipeline = ChronosPipeline.from_pretrained(\n",
        "  \"amazon/chronos-t5-tiny\",\n",
        "  device_map=\"cpu\",\n",
        "  torch_dtype=torch.bfloat16,\n",
        ")\n",
        "\n",
        "df = pd.read_csv('health_care_data_2023_2024.csv')\n",
        "df = df[['Date', 'ER_visits']]\n",
        "\n",
        "# context must be either a 1D tensor, a list of 1D tensors,\n",
        "# or a left-padded 2D tensor with batch as the first dimension\n",
        "context = torch.tensor(df[\"ER_visits\"])\n",
        "prediction_length = 12\n",
        "forecast = pipeline.predict(context, prediction_length)  # shape [num_series, num_samples, prediction_length]\n",
        "\n",
        "# visualize the forecast\n",
        "forecast_index = range(len(df), len(df) + prediction_length)\n",
        "low, median, high = np.quantile(forecast[0].numpy(), [0.1, 0.5, 0.9], axis=0)\n",
        "\n",
        "plt.figure(figsize=(8, 4))\n",
        "plt.plot(df[\"ER_visits\"], color=\"royalblue\", label=\"historical data\")\n",
        "plt.plot(forecast_index, median, color=\"tomato\", label=\"median forecast\")\n",
        "plt.fill_between(forecast_index, low, high, color=\"tomato\", alpha=0.3, label=\"80% prediction interval\")\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.show()\n"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 800x400 with 1 Axes>",
            "image/png": "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y83NZdu2bYwfP77C9Up/MViyZIljCID90m9bFosFa2kXwDXs3buXwsJCRyDcunUrBoOhXCvjlW6//Xa+++47oqOjcXcv/6Vls9lo1qwZOp2Obdu2ERkZCcDFixc5duwYvXv3vuo1O3bsyNmzZ8t1XV9Or9ff8Fnatm1LcnIyycnJjvIfOnSI7OxsYmJirvvemna18l6v3m6kR48eRERE8O9//5tVq1bxxBNPOEJxZmYmR48eZeHChdx9990AbNq0qWYeRAghaorFrHZTSklWs+Yt5rJJShoXDmE2m2oJ3Z1QtrOSRgMt26sW0cbXHormim7qX9pkMvHUU0+xcOFCGjVq5Diek5PDZ599xvvvv0/fvn3p2rUrX3zxBZs3b2br1q0ArFmzhkOHDvH111/TuXNnBgwYwBtvvMEnn3zSoFttBg8ezKxZs/j55585ffo0P/zwA++//75jckppS/Sbb77Jf/7zH/bv38/IkSMJDw/nkUceqXC9N954g4EDB9KlSxcAevbsyffff8++ffv4+OOP6dmz53XLYzabGTt2LIcOHWLlypW89tprTJw4sUJovtyECRPIyspi+PDh7Nixg8TERFavXs2YMWOwWq0YDAb+/Oc/M3XqVH799VcOHDjA6NGjr3vN3r17c8899zBkyBDWrl3LqVOnWLVqFb/88gugushNJhPx8fFkZGRQUFBxj95+/frRoUMHnnrqKXbv3s327dsZOXIkvXv35o477rhuPdS06Ohotm3bxunTpx1d6Deqtxt58skn+fTTT1m7dq1jzDFAo0aNCAwM5F//+hcnTpzg119/ZcqUKbfy8YQQovJMeXD6OOz8HfZsVbsN+VxatslgdN0wWmKBAztgyUew+lsVRt3d1YL2I56H/kMaXBiFm2whnTBhAoMGDaJfv368+eabjuO7du3CYrGUmwnepk0bIiMj2bJlC927d2fLli106NCh3OScuLg4xo8fz8GDBx0B6nLFxcUUF5ftfJSbmwuolj6LxVLutRaLBbvdjs1mK99VarOBza6WSigdl1FJdrt6n91Ng62y65Da7JfuWbku3w8//JDp06fz7LPPkp6eTnh4OH/961959dVXHc/xwgsvYDKZ+Otf/0p2dja9evVi5cqV6PX6cs964MABli9fzu7dux3HH3vsMdavX8/dd99N69at+frrr6/ZlWy32+nb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"
          },
          "metadata": {}
        }
      ],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1721764283616
        }
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python38-azureml",
      "language": "python",
      "display_name": "Python 3.8 - AzureML"
    },
    "language_info": {
      "name": "python",
      "version": "3.8.5",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "ms_spell_check": {
        "ms_spell_check_language": "en"
      },
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "kernel_info": {
      "name": "python38-azureml"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}